/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFontSecurityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ユーザID取得API
        /// </summary>
        /// <remarks>
        /// フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Object</returns>
        Object GetUserId(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// ユーザID取得API
        /// </summary>
        /// <remarks>
        /// フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetUserIdWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        /// <summary>
        /// 他端末のフォントがコピーされた通知API
        /// </summary>
        /// <remarks>
        /// 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Object</returns>
        Object NotifyFontFileCopyDetection(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5);

        /// <summary>
        /// 他端末のフォントがコピーされた通知API
        /// </summary>
        /// <remarks>
        /// 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> NotifyFontFileCopyDetectionWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5);
        /// <summary>
        /// 異常なフォントなしの通知API
        /// </summary>
        /// <remarks>
        /// 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Object</returns>
        Object NotifyVerifiedFonts(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// 異常なフォントなしの通知API
        /// </summary>
        /// <remarks>
        /// 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> NotifyVerifiedFontsWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFontSecurityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ユーザID取得API
        /// </summary>
        /// <remarks>
        /// フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetUserIdAsync(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// ユーザID取得API
        /// </summary>
        /// <remarks>
        /// フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserIdAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        /// <summary>
        /// 他端末のフォントがコピーされた通知API
        /// </summary>
        /// <remarks>
        /// 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> NotifyFontFileCopyDetectionAsync(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5);

        /// <summary>
        /// 他端末のフォントがコピーされた通知API
        /// </summary>
        /// <remarks>
        /// 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyFontFileCopyDetectionAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5);
        /// <summary>
        /// 異常なフォントなしの通知API
        /// </summary>
        /// <remarks>
        /// 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> NotifyVerifiedFontsAsync(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// 異常なフォントなしの通知API
        /// </summary>
        /// <remarks>
        /// 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyVerifiedFontsAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFontSecurityApi : IFontSecurityApiSync, IFontSecurityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FontSecurityApi : IFontSecurityApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FontSecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FontSecurityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FontSecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FontSecurityApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FontSecurityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FontSecurityApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FontSecurityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FontSecurityApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ユーザID取得API フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Object</returns>
        public Object GetUserId(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = GetUserIdWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザID取得API フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetUserIdWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->GetUserId");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->GetUserId");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v1/users/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザID取得API フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetUserIdAsync(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await GetUserIdAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// ユーザID取得API フォントファイルのコピー対策（&#x3D;ユーザIDによるファイル照合）に利用するユーザIDを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetUserIdAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->GetUserId");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->GetUserId");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v1/users/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 他端末のフォントがコピーされた通知API 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Object</returns>
        public Object NotifyFontFileCopyDetection(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = NotifyFontFileCopyDetectionWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject5);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 他端末のフォントがコピーされた通知API 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> NotifyFontFileCopyDetectionWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->NotifyFontFileCopyDetection");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->NotifyFontFileCopyDetection");

            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling FontSecurityApi->NotifyFontFileCopyDetection");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject5;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/notifications/font-file-copy-detection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyFontFileCopyDetection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 他端末のフォントがコピーされた通知API 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> NotifyFontFileCopyDetectionAsync(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await NotifyFontFileCopyDetectionAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject5);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 他端末のフォントがコピーされた通知API 他端末のフォントがコピーされた時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> NotifyFontFileCopyDetectionAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject5 inlineObject5)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->NotifyFontFileCopyDetection");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->NotifyFontFileCopyDetection");

            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling FontSecurityApi->NotifyFontFileCopyDetection");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject5;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/notifications/font-file-copy-detection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyFontFileCopyDetection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 異常なフォントなしの通知API 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Object</returns>
        public Object NotifyVerifiedFonts(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = NotifyVerifiedFontsWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 異常なフォントなしの通知API 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> NotifyVerifiedFontsWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->NotifyVerifiedFonts");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->NotifyVerifiedFonts");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v1/notifications/verified-fonts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyVerifiedFonts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 異常なフォントなしの通知API 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> NotifyVerifiedFontsAsync(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await NotifyVerifiedFontsAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 異常なフォントなしの通知API 異常なフォントが検知されなくなった時にFW運用者に通知する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> NotifyVerifiedFontsAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling FontSecurityApi->NotifyVerifiedFonts");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling FontSecurityApi->NotifyVerifiedFonts");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v1/notifications/verified-fonts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyVerifiedFonts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
