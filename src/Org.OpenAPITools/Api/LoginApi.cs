/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 2要素認証API
        /// </summary>
        /// <remarks>
        /// 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        AccessTokenRefreshTokenResponse Auth2fact(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1);

        /// <summary>
        /// 2要素認証API
        /// </summary>
        /// <remarks>
        /// 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        ApiResponse<AccessTokenRefreshTokenResponse> Auth2factWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1);
        /// <summary>
        /// 端末使用API
        /// </summary>
        /// <remarks>
        /// ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        AccessTokenRefreshTokenResponse ChangeDeviceInUse(string X_LETS_DEVICEID, string userAgent, Object body);

        /// <summary>
        /// 端末使用API
        /// </summary>
        /// <remarks>
        /// ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        ApiResponse<AccessTokenRefreshTokenResponse> ChangeDeviceInUseWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body);
        /// <summary>
        /// 端末解除API
        /// </summary>
        /// <remarks>
        /// ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Model200</returns>
        Model200 ChangeDeviceOutOfUse(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2);

        /// <summary>
        /// 端末解除API
        /// </summary>
        /// <remarks>
        /// ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ChangeDeviceOutOfUseWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2);
        /// <summary>
        /// 端末情報取得API
        /// </summary>
        /// <remarks>
        /// ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>DevicesResponse</returns>
        DevicesResponse GetDevices(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// 端末情報取得API
        /// </summary>
        /// <remarks>
        /// ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of DevicesResponse</returns>
        ApiResponse<DevicesResponse> GetDevicesWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        /// <summary>
        /// 会員登録画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>UrlResponse</returns>
        UrlResponse GetMemberRegistrationUrl(string userAgent);

        /// <summary>
        /// 会員登録画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of UrlResponse</returns>
        ApiResponse<UrlResponse> GetMemberRegistrationUrlWithHttpInfo(string userAgent);
        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>UrlResponse</returns>
        UrlResponse GetPasswordResetUrl(string userAgent);

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of UrlResponse</returns>
        ApiResponse<UrlResponse> GetPasswordResetUrlWithHttpInfo(string userAgent);
        /// <summary>
        /// ログインAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        AccessTokenRefreshTokenResponse Login(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject);

        /// <summary>
        /// ログインAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        ApiResponse<AccessTokenRefreshTokenResponse> LoginWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject);
        /// <summary>
        /// ログアウトAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Model200</returns>
        Model200 Logout(string X_LETS_DEVICEID, string userAgent, Object body);

        /// <summary>
        /// ログアウトAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> LogoutWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body);
        /// <summary>
        /// デバイスID発行API
        /// </summary>
        /// <remarks>
        /// デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>DeviceIdResponse</returns>
        DeviceIdResponse PostDeviceId(string userAgent, InlineObject4 inlineObject4);

        /// <summary>
        /// デバイスID発行API
        /// </summary>
        /// <remarks>
        /// デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of DeviceIdResponse</returns>
        ApiResponse<DeviceIdResponse> PostDeviceIdWithHttpInfo(string userAgent, InlineObject4 inlineObject4);
        /// <summary>
        /// アクセストークン更新API
        /// </summary>
        /// <remarks>
        /// 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse Token(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3);

        /// <summary>
        /// アクセストークン更新API
        /// </summary>
        /// <remarks>
        /// 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> TokenWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 2要素認証API
        /// </summary>
        /// <remarks>
        /// 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> Auth2factAsync(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1);

        /// <summary>
        /// 2要素認証API
        /// </summary>
        /// <remarks>
        /// 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenRefreshTokenResponse>> Auth2factAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1);
        /// <summary>
        /// 端末使用API
        /// </summary>
        /// <remarks>
        /// ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> ChangeDeviceInUseAsync(string X_LETS_DEVICEID, string userAgent, Object body);

        /// <summary>
        /// 端末使用API
        /// </summary>
        /// <remarks>
        /// ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenRefreshTokenResponse>> ChangeDeviceInUseAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body);
        /// <summary>
        /// 端末解除API
        /// </summary>
        /// <remarks>
        /// ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ChangeDeviceOutOfUseAsync(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2);

        /// <summary>
        /// 端末解除API
        /// </summary>
        /// <remarks>
        /// ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ChangeDeviceOutOfUseAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2);
        /// <summary>
        /// 端末情報取得API
        /// </summary>
        /// <remarks>
        /// ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of DevicesResponse</returns>
        System.Threading.Tasks.Task<DevicesResponse> GetDevicesAsync(string X_LETS_DEVICEID, string userAgent);

        /// <summary>
        /// 端末情報取得API
        /// </summary>
        /// <remarks>
        /// ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (DevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DevicesResponse>> GetDevicesAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent);
        /// <summary>
        /// 会員登録画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of UrlResponse</returns>
        System.Threading.Tasks.Task<UrlResponse> GetMemberRegistrationUrlAsync(string userAgent);

        /// <summary>
        /// 会員登録画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (UrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlResponse>> GetMemberRegistrationUrlAsyncWithHttpInfo(string userAgent);
        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of UrlResponse</returns>
        System.Threading.Tasks.Task<UrlResponse> GetPasswordResetUrlAsync(string userAgent);

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API
        /// </summary>
        /// <remarks>
        /// サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (UrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlResponse>> GetPasswordResetUrlAsyncWithHttpInfo(string userAgent);
        /// <summary>
        /// ログインAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> LoginAsync(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject);

        /// <summary>
        /// ログインAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenRefreshTokenResponse>> LoginAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject);
        /// <summary>
        /// ログアウトAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> LogoutAsync(string X_LETS_DEVICEID, string userAgent, Object body);

        /// <summary>
        /// ログアウトAPI
        /// </summary>
        /// <remarks>
        /// 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> LogoutAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body);
        /// <summary>
        /// デバイスID発行API
        /// </summary>
        /// <remarks>
        /// デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of DeviceIdResponse</returns>
        System.Threading.Tasks.Task<DeviceIdResponse> PostDeviceIdAsync(string userAgent, InlineObject4 inlineObject4);

        /// <summary>
        /// デバイスID発行API
        /// </summary>
        /// <remarks>
        /// デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse (DeviceIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceIdResponse>> PostDeviceIdAsyncWithHttpInfo(string userAgent, InlineObject4 inlineObject4);
        /// <summary>
        /// アクセストークン更新API
        /// </summary>
        /// <remarks>
        /// 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> TokenAsync(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3);

        /// <summary>
        /// アクセストークン更新API
        /// </summary>
        /// <remarks>
        /// 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> TokenAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginApi : ILoginApiSync, ILoginApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoginApi : ILoginApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LoginApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 2要素認証API 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        public AccessTokenRefreshTokenResponse Auth2fact(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = Auth2factWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 2要素認証API 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> Auth2factWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Auth2fact");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Auth2fact");

            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling LoginApi->Auth2fact");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject1;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessTokenRefreshTokenResponse>("/api/v1/auth2fact", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth2fact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 2要素認証API 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> Auth2factAsync(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = await Auth2factAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject1);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 2要素認証API 2要素認証が必要な端末にアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse>> Auth2factAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject1 inlineObject1)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Auth2fact");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Auth2fact");

            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling LoginApi->Auth2fact");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject1;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessTokenRefreshTokenResponse>("/api/v1/auth2fact", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Auth2fact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末使用API ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        public AccessTokenRefreshTokenResponse ChangeDeviceInUse(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = ChangeDeviceInUseWithHttpInfo(X_LETS_DEVICEID, userAgent, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 端末使用API ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> ChangeDeviceInUseWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->ChangeDeviceInUse");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->ChangeDeviceInUse");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling LoginApi->ChangeDeviceInUse");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessTokenRefreshTokenResponse>("/api/v1/device/in-use", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeDeviceInUse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末使用API ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> ChangeDeviceInUseAsync(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = await ChangeDeviceInUseAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 端末使用API ユーザの操作中端末のログイン状態を「使用中」に変更する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse>> ChangeDeviceInUseAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->ChangeDeviceInUse");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->ChangeDeviceInUse");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling LoginApi->ChangeDeviceInUse");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessTokenRefreshTokenResponse>("/api/v1/device/in-use", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeDeviceInUse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末解除API ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Model200</returns>
        public Model200 ChangeDeviceOutOfUse(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2)
        {
            Org.OpenAPITools.Client.ApiResponse<Model200> localVarResponse = ChangeDeviceOutOfUseWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 端末解除API ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Model200</returns>
        public Org.OpenAPITools.Client.ApiResponse<Model200> ChangeDeviceOutOfUseWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->ChangeDeviceOutOfUse");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->ChangeDeviceOutOfUse");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling LoginApi->ChangeDeviceOutOfUse");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject2;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Model200>("/api/v1/device/out-of-use", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeDeviceOutOfUse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末解除API ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ChangeDeviceOutOfUseAsync(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2)
        {
            Org.OpenAPITools.Client.ApiResponse<Model200> localVarResponse = await ChangeDeviceOutOfUseAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject2);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 端末解除API ユーザの指定端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Model200>> ChangeDeviceOutOfUseAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject2 inlineObject2)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->ChangeDeviceOutOfUse");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->ChangeDeviceOutOfUse");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling LoginApi->ChangeDeviceOutOfUse");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject2;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Model200>("/api/v1/device/out-of-use", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeDeviceOutOfUse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末情報取得API ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>DevicesResponse</returns>
        public DevicesResponse GetDevices(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<DevicesResponse> localVarResponse = GetDevicesWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 端末情報取得API ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of DevicesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DevicesResponse> GetDevicesWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->GetDevices");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetDevices");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DevicesResponse>("/api/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 端末情報取得API ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of DevicesResponse</returns>
        public async System.Threading.Tasks.Task<DevicesResponse> GetDevicesAsync(string X_LETS_DEVICEID, string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<DevicesResponse> localVarResponse = await GetDevicesAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 端末情報取得API ユーザに紐づく全端末情報（削除済みデータを除く）を取得する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (DevicesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DevicesResponse>> GetDevicesAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->GetDevices");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetDevices");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DevicesResponse>("/api/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 会員登録画面URLの取得API サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>UrlResponse</returns>
        public UrlResponse GetMemberRegistrationUrl(string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<UrlResponse> localVarResponse = GetMemberRegistrationUrlWithHttpInfo(userAgent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 会員登録画面URLの取得API サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of UrlResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<UrlResponse> GetMemberRegistrationUrlWithHttpInfo(string userAgent)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetMemberRegistrationUrl");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UrlResponse>("/api/v1/screens/member-registration/url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemberRegistrationUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 会員登録画面URLの取得API サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of UrlResponse</returns>
        public async System.Threading.Tasks.Task<UrlResponse> GetMemberRegistrationUrlAsync(string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<UrlResponse> localVarResponse = await GetMemberRegistrationUrlAsyncWithHttpInfo(userAgent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// 会員登録画面URLの取得API サービスサイトの「REG_01_01 会員登録」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (UrlResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UrlResponse>> GetMemberRegistrationUrlAsyncWithHttpInfo(string userAgent)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetMemberRegistrationUrl");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UrlResponse>("/api/v1/screens/member-registration/url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemberRegistrationUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>UrlResponse</returns>
        public UrlResponse GetPasswordResetUrl(string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<UrlResponse> localVarResponse = GetPasswordResetUrlWithHttpInfo(userAgent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>ApiResponse of UrlResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<UrlResponse> GetPasswordResetUrlWithHttpInfo(string userAgent)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetPasswordResetUrl");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UrlResponse>("/api/v1/screens/password-reset/url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPasswordResetUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of UrlResponse</returns>
        public async System.Threading.Tasks.Task<UrlResponse> GetPasswordResetUrlAsync(string userAgent)
        {
            Org.OpenAPITools.Client.ApiResponse<UrlResponse> localVarResponse = await GetPasswordResetUrlAsyncWithHttpInfo(userAgent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// パスワードを忘れた方_再設定画面URLの取得API サービスサイトの「LOG_02_01 パスワードを忘れた方_再設定画面」のURLを返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <returns>Task of ApiResponse (UrlResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UrlResponse>> GetPasswordResetUrlAsyncWithHttpInfo(string userAgent)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->GetPasswordResetUrl");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UrlResponse>("/api/v1/screens/password-reset/url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPasswordResetUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ログインAPI 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>AccessTokenRefreshTokenResponse</returns>
        public AccessTokenRefreshTokenResponse Login(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = LoginWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ログインAPI 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of AccessTokenRefreshTokenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> LoginWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Login");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Login");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling LoginApi->Login");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessTokenRefreshTokenResponse>("/api/v1/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ログインAPI 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of AccessTokenRefreshTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenRefreshTokenResponse> LoginAsync(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse> localVarResponse = await LoginAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject);
            return localVarResponse.Data;

        }

        /// <summary>
        /// ログインAPI 端末に紐づくアクセストークン・リフレッシュトークンを発行する。 利用端末台数が既に2台の場合も、アクセストークン・リフレッシュトークンを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse (AccessTokenRefreshTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccessTokenRefreshTokenResponse>> LoginAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject inlineObject)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Login");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Login");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling LoginApi->Login");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessTokenRefreshTokenResponse>("/api/v1/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ログアウトAPI 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Model200</returns>
        public Model200 Logout(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            Org.OpenAPITools.Client.ApiResponse<Model200> localVarResponse = LogoutWithHttpInfo(X_LETS_DEVICEID, userAgent, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ログアウトAPI 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Model200</returns>
        public Org.OpenAPITools.Client.ApiResponse<Model200> LogoutWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Logout");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Logout");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling LoginApi->Logout");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter

            localVarRequestOptions.Data = body;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Model200>("/api/v1/logout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ログアウトAPI 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> LogoutAsync(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            Org.OpenAPITools.Client.ApiResponse<Model200> localVarResponse = await LogoutAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// ログアウトAPI 端末に紐づくアクセストークン・リフレッシュトークンを無効化し、ユーザの操作中端末のログイン状態を解除（「未使用」に変更）する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Model200>> LogoutAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, Object body)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Logout");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Logout");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling LoginApi->Logout");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Model200>("/api/v1/logout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// デバイスID発行API デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>DeviceIdResponse</returns>
        public DeviceIdResponse PostDeviceId(string userAgent, InlineObject4 inlineObject4)
        {
            Org.OpenAPITools.Client.ApiResponse<DeviceIdResponse> localVarResponse = PostDeviceIdWithHttpInfo(userAgent, inlineObject4);
            return localVarResponse.Data;
        }

        /// <summary>
        /// デバイスID発行API デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of DeviceIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeviceIdResponse> PostDeviceIdWithHttpInfo(string userAgent, InlineObject4 inlineObject4)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->PostDeviceId");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling LoginApi->PostDeviceId");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject4;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeviceIdResponse>("/api/v1/deviceId", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// デバイスID発行API デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of DeviceIdResponse</returns>
        public async System.Threading.Tasks.Task<DeviceIdResponse> PostDeviceIdAsync(string userAgent, InlineObject4 inlineObject4)
        {
            Org.OpenAPITools.Client.ApiResponse<DeviceIdResponse> localVarResponse = await PostDeviceIdAsyncWithHttpInfo(userAgent, inlineObject4);
            return localVarResponse.Data;

        }

        /// <summary>
        /// デバイスID発行API デバイスIDを発行する。既にデバイスID発行済みの端末には新規デバイスIDを発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse (DeviceIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeviceIdResponse>> PostDeviceIdAsyncWithHttpInfo(string userAgent, InlineObject4 inlineObject4)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->PostDeviceId");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling LoginApi->PostDeviceId");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject4;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeviceIdResponse>("/api/v1/deviceId", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アクセストークン更新API 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse Token(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenResponse> localVarResponse = TokenWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// アクセストークン更新API 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccessTokenResponse> TokenWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Token");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Token");

            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling LoginApi->Token");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject3;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessTokenResponse>("/api/v1/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アクセストークン更新API 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> TokenAsync(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3)
        {
            Org.OpenAPITools.Client.ApiResponse<AccessTokenResponse> localVarResponse = await TokenAsyncWithHttpInfo(X_LETS_DEVICEID, userAgent, inlineObject3);
            return localVarResponse.Data;

        }

        /// <summary>
        /// アクセストークン更新API 有効期限切れアクセストークンの代わりに、有効アクセストークンを新規発行する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_LETS_DEVICEID">デバイス固有のIDを設定する。</param>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccessTokenResponse>> TokenAsyncWithHttpInfo(string X_LETS_DEVICEID, string userAgent, InlineObject3 inlineObject3)
        {
            // verify the required parameter 'X_LETS_DEVICEID' is set
            if (X_LETS_DEVICEID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_LETS_DEVICEID' when calling LoginApi->Token");

            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->Token");

            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling LoginApi->Token");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("X-LETS-DEVICEID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_LETS_DEVICEID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject3;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessTokenResponse>("/api/v1/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アカウント認証API オンライン利用／オフライン利用を判定する。オフライン利用の場合はオフラインデバイスID等を返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>AuthenticateAccountResponse</returns>
        public AuthenticateAccountResponse AuthenticateAccount(string userAgent, InlineObject inlineObject)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticateAccountResponse> localVarResponse = AuthenticateAccountWithHttpInfo(userAgent, inlineObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// アカウント認証API オンライン利用／オフライン利用を判定する。オフライン利用の場合はオフラインデバイスID等を返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of AuthenticateAccountResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthenticateAccountResponse> AuthenticateAccountWithHttpInfo(string userAgent, InlineObject inlineObject)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->PostAuthenticateAccount");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling LoginApi->PostAuthenticateAccount");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticateAccountResponse>("/api/v1/authenticate-account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthenticateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アカウント認証API オンライン利用／オフライン利用を判定する。オフライン利用の場合はオフラインデバイスID等を返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of AuthenticateAccountResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticateAccountResponse> PostAuthenticateAccountAsync(string userAgent, InlineObject4 inlineObject4)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticateAccountResponse> localVarResponse = await PostAuthenticateAccountAsyncWithHttpInfo(userAgent, inlineObject4);
            return localVarResponse.Data;

        }

        /// <summary>
        /// アカウント認証API オンライン利用／オフライン利用を判定する。オフライン利用の場合はオフラインデバイスID等を返却する。 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAgent">LETS/{アプリバージョン} ({OSタイプ} {OSバージョン})</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse (AuthenticateAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthenticateAccountResponse>> PostAuthenticateAccountAsyncWithHttpInfo(string userAgent, InlineObject4 inlineObject4)
        {
            // verify the required parameter 'userAgent' is set
            if (userAgent == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userAgent' when calling LoginApi->PostAuthenticateAccount");

            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling LoginApi->PostAuthenticateAccount");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json; charset=utf-8"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.HeaderParameters.Add("User-Agent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userAgent)); // header parameter
            localVarRequestOptions.Data = inlineObject4;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticateAccountResponse>("/api/v1/authenticate-account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthenticateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
