/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdateLicenseData
    /// </summary>
    [DataContract]
    public partial class UpdateLicenseData : IEquatable<UpdateLicenseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLicenseData" /> class.
        /// </summary>
        /// <param name="licenseKey">licenseKey.</param>
        public UpdateLicenseData(string licenseKey = default(string))
        {
            this.LicenseKey = licenseKey;
        }

        /// <summary>
        /// Gets or Sets LicenseKey
        /// </summary>
        [DataMember(Name = "licenseKey", EmitDefaultValue = false)]
        public string LicenseKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateLicenseData {\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateLicenseData);
        }

        /// <summary>
        /// Returns true if UpdateLicenseData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateLicenseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateLicenseData input)
        {
            if (input == null)
                return false;

            return
                (
                    this.LicenseKey == input.LicenseKey ||
                    (this.LicenseKey != null &&
                    this.LicenseKey.Equals(input.LicenseKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenseKey != null)
                    hashCode = hashCode * 59 + this.LicenseKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
