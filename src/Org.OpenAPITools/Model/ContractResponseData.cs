/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContractsData
    /// </summary>
    [DataContract]
    public partial class ContractResponseData :  IEquatable<ContractResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractResponseData" /> class.
        /// </summary>
        /// <param name="needContractRenewal">needContractRenewal.</param>
        /// <param name="contracts">contracts.</param>
        public ContractResponseData(bool needContractRenewal = default(bool), List<ContractResponseContract> contracts = default(List<ContractResponseContract>))
        {
            this.NeedContractRenewal = needContractRenewal;
            this.Contracts = contracts;
        }
        
        /// <summary>
        /// Gets or Sets NeedContractRenewal
        /// </summary>
        [DataMember(Name="needContractRenewal", EmitDefaultValue=false)]
        public bool NeedContractRenewal { get; set; }

        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [DataMember(Name="contracts", EmitDefaultValue=false)]
        public List<ContractResponseContract> Contracts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractsData {\n");
            sb.Append("  NeedContractRenewal: ").Append(NeedContractRenewal).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractResponseData);
        }

        /// <summary>
        /// Returns true if ContractsData instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NeedContractRenewal == input.NeedContractRenewal ||
                    this.NeedContractRenewal.Equals(input.NeedContractRenewal)
                ) && 
                (
                    this.Contracts == input.Contracts ||
                    this.Contracts != null &&
                    input.Contracts != null &&
                    this.Contracts.SequenceEqual(input.Contracts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NeedContractRenewal.GetHashCode();
                if (this.Contracts != null)
                    hashCode = hashCode * 59 + this.Contracts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
