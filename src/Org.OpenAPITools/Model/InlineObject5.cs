/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject5
    /// </summary>
    [DataContract]
    public partial class InlineObject5 : IEquatable<InlineObject5>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject5" /> class.
        /// </summary>
        /// <param name="fontId">fontId.</param>
        /// <param name="originalUserId">originalUserId.</param>
        /// <param name="originalDeviceId">originalDeviceId.</param>
        /// <param name="detected">detected.</param>
        public InlineObject5(string fontId = default(string), string originalUserId = default(string), string originalDeviceId = default(string), string detected = default(string))
        {
            this.FontId = fontId;
            this.OriginalUserId = originalUserId;
            this.OriginalDeviceId = originalDeviceId;
            this.Detected = detected;
        }

        /// <summary>
        /// Gets or Sets FontId
        /// </summary>
        [DataMember(Name = "fontId", EmitDefaultValue = false)]
        public string FontId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalUserId
        /// </summary>
        [DataMember(Name = "originalUserId", EmitDefaultValue = false)]
        public string OriginalUserId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalDeviceId
        /// </summary>
        [DataMember(Name = "originalDeviceId", EmitDefaultValue = false)]
        public string OriginalDeviceId { get; set; }

        /// <summary>
        /// Gets or Sets Detected
        /// </summary>
        [DataMember(Name = "detected", EmitDefaultValue = false)]
        public string Detected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject5 {\n");
            sb.Append("  FontId: ").Append(FontId).Append("\n");
            sb.Append("  OriginalUserId: ").Append(OriginalUserId).Append("\n");
            sb.Append("  OriginalDeviceId: ").Append(OriginalDeviceId).Append("\n");
            sb.Append("  Detected: ").Append(Detected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject5);
        }

        /// <summary>
        /// Returns true if InlineObject5 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject5 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject5 input)
        {
            if (input == null)
                return false;

            return
                (
                    this.FontId == input.FontId ||
                    (this.FontId != null &&
                    this.FontId.Equals(input.FontId))
                ) &&
                (
                    this.OriginalUserId == input.OriginalUserId ||
                    (this.OriginalUserId != null &&
                    this.OriginalUserId.Equals(input.OriginalUserId))
                ) &&
                (
                    this.OriginalDeviceId == input.OriginalDeviceId ||
                    (this.OriginalDeviceId != null &&
                    this.OriginalDeviceId.Equals(input.OriginalDeviceId))
                ) &&
                (
                    this.Detected == input.Detected ||
                    (this.Detected != null &&
                    this.Detected.Equals(input.Detected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FontId != null)
                    hashCode = hashCode * 59 + this.FontId.GetHashCode();
                if (this.OriginalUserId != null)
                    hashCode = hashCode * 59 + this.OriginalUserId.GetHashCode();
                if (this.OriginalDeviceId != null)
                    hashCode = hashCode * 59 + this.OriginalDeviceId.GetHashCode();
                if (this.Detected != null)
                    hashCode = hashCode * 59 + this.Detected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
