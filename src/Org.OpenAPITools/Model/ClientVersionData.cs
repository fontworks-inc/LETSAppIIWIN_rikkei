/* 
 * フォント配信サービス
 *
 * フォント配信サービスのインタフェース仕様です。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ClientVersionData
    /// </summary>
    [DataContract]
    public partial class ClientVersionData : IEquatable<ClientVersionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientVersionData" /> class.
        /// </summary>
        /// <param name="appId">appId.</param>
        /// <param name="version">version.</param>
        /// <param name="url">url.</param>
        public ClientVersionData(string appId = default(string), string version = default(string), string url = default(string))
        {
            this.AppId = appId;
            this.Version = version;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets appId
        /// </summary>
        [DataMember(Name = "appId", EmitDefaultValue = false)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientVersionData {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientVersionData);
        }

        /// <summary>
        /// Returns true if ClientVersionData instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientVersionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientVersionData input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AppId == input.AppId ||
                    this.AppId.Equals(input.AppId)
                ) &&
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) &&
                (
                    this.Url == input.Url ||
                    this.Url.Equals(input.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AppId.GetHashCode();
                hashCode = hashCode * 60 + this.Version.GetHashCode();
                hashCode = hashCode * 72 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
